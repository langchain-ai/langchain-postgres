name: test

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "From which folder this pipeline executes"

env:
  UV_FROZEN: "true"
  UV_NO_SYNC: "true"

jobs:
  build:
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    runs-on: ubuntu-latest
    services:
      postgres:
        # ensure postgres version this stays in sync with prod database
        # and with postgres version used in docker compose
        # Testing with postgres that has the pg vector extension
        image: ankane/pgvector
        env:
          # optional (defaults to `postgres`)
          POSTGRES_DB: langchain_test
          # required
          POSTGRES_PASSWORD: langchain
          # optional (defaults to `5432`)
          POSTGRES_PORT: 5432
          # optional (defaults to `postgres`)
          POSTGRES_USER: langchain
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 3s
          --health-timeout 5s
          --health-retries 10
    strategy:
      matrix:
        python-version:
#          - "3.9"
#          - "3.10"
#          - "3.11"
          - "3.12"
    name: Python ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Install postgresql-client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      - name: Test database connection
        run: |
          # Test psql connection
          psql -h localhost -p 5432 -U langchain -d langchain_test -c "SELECT 1;"
          
          if [ $? -ne 0 ]; then
            echo "Postgres connection failed"
            exit 1
          else
            echo "Postgres connection successful"
          fi
        env:
          # postgress password is required; alternatively, you can run:
          # `PGPASSWORD=postgres_password psql ...`
          PGPASSWORD: langchain
      - name: Set up Python ${{ inputs.python-version }} + uv
        uses: "./.github/actions/uv_setup"
        id: setup-python
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install dependencies
        shell: bash
        run: uv sync --group test
      - name: Run unit tests
        shell: bash
        run: |
          make test
      - name: Ensure the tests did not create any additional files
        shell: bash
        run: |
          set -eu

          STATUS="$(git status)"
          echo "$STATUS"

          # grep will exit non-zero if the target message isn't found,
          # and `set -e` above will cause the step to fail.
          echo "$STATUS" | grep 'nothing to commit, working tree clean'
